
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AssociacaoProdutoScalarFieldEnum = {
  id: 'id',
  produto_a_id: 'produto_a_id',
  produto_b_id: 'produto_b_id',
  suporte: 'suporte',
  confianca: 'confianca',
  lift: 'lift',
  a_nome: 'a_nome',
  b_nome: 'b_nome',
  a_tipo: 'a_tipo',
  b_tipo: 'b_tipo',
  vendas_produto_a: 'vendas_produto_a',
  vendas_produto_b: 'vendas_produto_b',
  atualizado_em: 'atualizado_em'
};

exports.Prisma.EmpresaScalarFieldEnum = {
  id: 'id',
  razaoSocial: 'razaoSocial',
  nomeFantasia: 'nomeFantasia',
  cnpjMatriz: 'cnpjMatriz',
  inscricaoEstadual: 'inscricaoEstadual',
  cidade: 'cidade',
  estado: 'estado',
  logradouro: 'logradouro',
  numero: 'numero',
  bairro: 'bairro',
  cep: 'cep',
  telefone: 'telefone',
  email: 'email',
  ativo: 'ativo',
  dataCriacao: 'dataCriacao',
  dataAtualizacao: 'dataAtualizacao'
};

exports.Prisma.ClienteScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  cpfCnpj: 'cpfCnpj',
  cidade: 'cidade',
  estado: 'estado',
  logradouro: 'logradouro',
  numero: 'numero',
  bairro: 'bairro',
  cep: 'cep',
  telefone: 'telefone'
};

exports.Prisma.FilialScalarFieldEnum = {
  id: 'id',
  empresaId: 'empresaId',
  nome: 'nome',
  cnpj: 'cnpj',
  cidade: 'cidade',
  estado: 'estado'
};

exports.Prisma.VendedorScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  cpf: 'cpf',
  filialId: 'filialId'
};

exports.Prisma.ProdutoScalarFieldEnum = {
  id: 'id',
  descricao: 'descricao',
  tipo: 'tipo',
  preco: 'preco'
};

exports.Prisma.MaquinaEstoqueScalarFieldEnum = {
  Chassi: 'Chassi',
  produtoId: 'produtoId',
  filialId: 'filialId',
  Status: 'Status'
};

exports.Prisma.NotasFiscalCabecalhoScalarFieldEnum = {
  id: 'id',
  numeroNota: 'numeroNota',
  dataEmissao: 'dataEmissao',
  valorTotal: 'valorTotal',
  filialId: 'filialId',
  clienteId: 'clienteId',
  vendedorId: 'vendedorId'
};

exports.Prisma.NotaFiscalItemScalarFieldEnum = {
  id: 'id',
  notaFiscalId: 'notaFiscalId',
  produtoId: 'produtoId',
  Quantidade: 'Quantidade',
  valorUnitario: 'valorUnitario',
  valorTotalItem: 'valorTotalItem',
  Chassi: 'Chassi'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt'
};

exports.Prisma.RfvParameterSetScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  name: 'name',
  strategy: 'strategy',
  windowDays: 'windowDays',
  weights: 'weights',
  ruleRecency: 'ruleRecency',
  ruleFrequency: 'ruleFrequency',
  ruleValue: 'ruleValue',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  calculationStrategy: 'calculationStrategy',
  classRanges: 'classRanges',
  conditionalRules: 'conditionalRules'
};

exports.Prisma.RfvSegmentScalarFieldEnum = {
  id: 'id',
  parameterSetId: 'parameterSetId',
  name: 'name',
  rules: 'rules',
  priority: 'priority'
};

exports.Prisma.ReceitaPeriodoScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  valorTotal: 'valorTotal',
  quantidadeNotas: 'quantidadeNotas',
  quantidadeItens: 'quantidadeItens',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceitaTipoProdutoScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  produtoId: 'produtoId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  tipoProduto: 'tipoProduto',
  valorTotal: 'valorTotal',
  quantidadeNotas: 'quantidadeNotas',
  quantidadeItens: 'quantidadeItens',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceitaProdutoModeloScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  produtoId: 'produtoId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  valorTotal: 'valorTotal',
  quantidadeNotas: 'quantidadeNotas',
  quantidadeItens: 'quantidadeItens',
  ranking: 'ranking',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrescimentoVendasScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  tipoComparacao: 'tipoComparacao',
  valorAtual: 'valorAtual',
  valorAnterior: 'valorAnterior',
  crescimento: 'crescimento',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketMedioScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  ticketMedioNF: 'ticketMedioNF',
  ticketMedioItem: 'ticketMedioItem',
  quantidadeNotas: 'quantidadeNotas',
  quantidadeItens: 'quantidadeItens',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ItensPorNFScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  mediaItens: 'mediaItens',
  p95Itens: 'p95Itens',
  quantidadeNotas: 'quantidadeNotas',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SazonalidadeScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  ano: 'ano',
  mes: 'mes',
  valorTotal: 'valorTotal',
  quantidadeNotas: 'quantidadeNotas',
  quantidadeItens: 'quantidadeItens',
  percentualAno: 'percentualAno',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceitaLocalizacaoScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  cidade: 'cidade',
  estado: 'estado',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  valorTotal: 'valorTotal',
  quantidadeNotas: 'quantidadeNotas',
  quantidadeItens: 'quantidadeItens',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceitaVendedorScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  vendedorId: 'vendedorId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  valorTotal: 'valorTotal',
  quantidadeNotas: 'quantidadeNotas',
  quantidadeItens: 'quantidadeItens',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EstatisticasNotasFiscaisScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  quantidadeNotas: 'quantidadeNotas',
  quantidadeItens: 'quantidadeItens',
  mediaItensPorNota: 'mediaItensPorNota',
  valorTotalNotas: 'valorTotalNotas',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceitaVendedorDetalhadaScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  vendedorId: 'vendedorId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  receitaTotal: 'receitaTotal',
  numeroNotas: 'numeroNotas',
  dataInicio: 'dataInicio',
  dataFim: 'dataFim',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketMedioVendedorScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  vendedorId: 'vendedorId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  ticketMedio: 'ticketMedio',
  quantidadeNotas: 'quantidadeNotas',
  valorTotal: 'valorTotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MixVendedorScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  vendedorId: 'vendedorId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  receitaMaquinas: 'receitaMaquinas',
  receitaPecas: 'receitaPecas',
  receitaServicos: 'receitaServicos',
  percentualMaquinas: 'percentualMaquinas',
  percentualPecas: 'percentualPecas',
  percentualServicos: 'percentualServicos',
  quantidadeNotasMaquinas: 'quantidadeNotasMaquinas',
  quantidadeNotasPecas: 'quantidadeNotasPecas',
  quantidadeNotasServicos: 'quantidadeNotasServicos',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoberturaCarteiraScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  vendedorId: 'vendedorId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  clientesUnicosAtendidos: 'clientesUnicosAtendidos',
  clientesAtivos: 'clientesAtivos',
  percentualCobertura: 'percentualCobertura',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RankingVendedoresScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  vendedorId: 'vendedorId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  tipoRanking: 'tipoRanking',
  posicaoRanking: 'posicaoRanking',
  valorMetrica: 'valorMetrica',
  totalVendedores: 'totalVendedores',
  percentilRanking: 'percentilRanking',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceitaFilialScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  receitaTotal: 'receitaTotal',
  numeroNotas: 'numeroNotas',
  ticketMedio: 'ticketMedio',
  numeroItens: 'numeroItens',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MixFilialScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  receitaMaquinas: 'receitaMaquinas',
  receitaPecas: 'receitaPecas',
  receitaServicos: 'receitaServicos',
  percentualMaquinas: 'percentualMaquinas',
  percentualPecas: 'percentualPecas',
  percentualServicos: 'percentualServicos',
  quantidadeNotasMaquinas: 'quantidadeNotasMaquinas',
  quantidadeNotasPecas: 'quantidadeNotasPecas',
  quantidadeNotasServicos: 'quantidadeNotasServicos',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParticipacaoReceitaFilialScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  receitaFilial: 'receitaFilial',
  receitaTotalEmpresa: 'receitaTotalEmpresa',
  percentualParticipacao: 'percentualParticipacao',
  posicaoRanking: 'posicaoRanking',
  totalFiliais: 'totalFiliais',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceitaFilialRegiaoScalarFieldEnum = {
  id: 'id',
  filialId: 'filialId',
  data: 'data',
  tipoPeriodo: 'tipoPeriodo',
  regiaoCliente: 'regiaoCliente',
  estadoCliente: 'estadoCliente',
  cidadeCliente: 'cidadeCliente',
  receitaRegiao: 'receitaRegiao',
  numeroNotas: 'numeroNotas',
  numeroClientes: 'numeroClientes',
  percentualReceita: 'percentualReceita',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.AssociacaoProdutoOrderByRelevanceFieldEnum = {
  a_nome: 'a_nome',
  b_nome: 'b_nome',
  a_tipo: 'a_tipo',
  b_tipo: 'b_tipo'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.EmpresaOrderByRelevanceFieldEnum = {
  razaoSocial: 'razaoSocial',
  nomeFantasia: 'nomeFantasia',
  cnpjMatriz: 'cnpjMatriz',
  inscricaoEstadual: 'inscricaoEstadual',
  cidade: 'cidade',
  estado: 'estado',
  logradouro: 'logradouro',
  numero: 'numero',
  bairro: 'bairro',
  cep: 'cep',
  telefone: 'telefone',
  email: 'email'
};

exports.Prisma.ClienteOrderByRelevanceFieldEnum = {
  nome: 'nome',
  cpfCnpj: 'cpfCnpj',
  cidade: 'cidade',
  estado: 'estado',
  logradouro: 'logradouro',
  numero: 'numero',
  bairro: 'bairro',
  cep: 'cep',
  telefone: 'telefone'
};

exports.Prisma.FilialOrderByRelevanceFieldEnum = {
  nome: 'nome',
  cnpj: 'cnpj',
  cidade: 'cidade',
  estado: 'estado'
};

exports.Prisma.VendedorOrderByRelevanceFieldEnum = {
  nome: 'nome',
  cpf: 'cpf'
};

exports.Prisma.ProdutoOrderByRelevanceFieldEnum = {
  descricao: 'descricao',
  tipo: 'tipo'
};

exports.Prisma.MaquinaEstoqueOrderByRelevanceFieldEnum = {
  Chassi: 'Chassi',
  Status: 'Status'
};

exports.Prisma.NotaFiscalItemOrderByRelevanceFieldEnum = {
  Chassi: 'Chassi'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.RfvParameterSetOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.RfvSegmentOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ReceitaPeriodoOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.ReceitaTipoProdutoOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo',
  tipoProduto: 'tipoProduto'
};

exports.Prisma.ReceitaProdutoModeloOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.CrescimentoVendasOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo',
  tipoComparacao: 'tipoComparacao'
};

exports.Prisma.TicketMedioOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.ItensPorNFOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.ReceitaLocalizacaoOrderByRelevanceFieldEnum = {
  cidade: 'cidade',
  estado: 'estado',
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.ReceitaVendedorOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.EstatisticasNotasFiscaisOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.ReceitaVendedorDetalhadaOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.TicketMedioVendedorOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.MixVendedorOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.CoberturaCarteiraOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.RankingVendedoresOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo',
  tipoRanking: 'tipoRanking'
};

exports.Prisma.ReceitaFilialOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.MixFilialOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.ParticipacaoReceitaFilialOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo'
};

exports.Prisma.ReceitaFilialRegiaoOrderByRelevanceFieldEnum = {
  tipoPeriodo: 'tipoPeriodo',
  regiaoCliente: 'regiaoCliente',
  estadoCliente: 'estadoCliente',
  cidadeCliente: 'cidadeCliente'
};
exports.RfvStrategy = exports.$Enums.RfvStrategy = {
  threshold: 'threshold',
  quantile: 'quantile'
};

exports.CalculationStrategy = exports.$Enums.CalculationStrategy = {
  automatic: 'automatic',
  manual: 'manual'
};

exports.Prisma.ModelName = {
  AssociacaoProduto: 'AssociacaoProduto',
  Empresa: 'Empresa',
  Cliente: 'Cliente',
  Filial: 'Filial',
  Vendedor: 'Vendedor',
  Produto: 'Produto',
  MaquinaEstoque: 'MaquinaEstoque',
  NotasFiscalCabecalho: 'NotasFiscalCabecalho',
  NotaFiscalItem: 'NotaFiscalItem',
  User: 'User',
  RfvParameterSet: 'RfvParameterSet',
  RfvSegment: 'RfvSegment',
  ReceitaPeriodo: 'ReceitaPeriodo',
  ReceitaTipoProduto: 'ReceitaTipoProduto',
  ReceitaProdutoModelo: 'ReceitaProdutoModelo',
  CrescimentoVendas: 'CrescimentoVendas',
  TicketMedio: 'TicketMedio',
  ItensPorNF: 'ItensPorNF',
  Sazonalidade: 'Sazonalidade',
  ReceitaLocalizacao: 'ReceitaLocalizacao',
  ReceitaVendedor: 'ReceitaVendedor',
  EstatisticasNotasFiscais: 'EstatisticasNotasFiscais',
  ReceitaVendedorDetalhada: 'ReceitaVendedorDetalhada',
  TicketMedioVendedor: 'TicketMedioVendedor',
  MixVendedor: 'MixVendedor',
  CoberturaCarteira: 'CoberturaCarteira',
  RankingVendedores: 'RankingVendedores',
  ReceitaFilial: 'ReceitaFilial',
  MixFilial: 'MixFilial',
  ParticipacaoReceitaFilial: 'ParticipacaoReceitaFilial',
  ReceitaFilialRegiao: 'ReceitaFilialRegiao'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
